=encoding UTF-8

=head1 NAME

TCOD::Console - Terminal emulator for rendering game screens

=head1 SYNOPSIS

    use TCOD;

    ...

=head1 DESCRIPTION

This class represents a terminal emulator for rendering text-based games.

=head1 METHODS

=head2 new

    $console = TCOD::Console->new( $width, $height );

=head2 from_file

    $console = TCOD::Console->from_file( $path );

=head2 load_asc

    $console = TCOD::Console->load_asc( $path );

=head2 load_apf

    $console = TCOD::Console->load_apf( $path );

=head2 save_asc

    $bool = $console->save_asc( $path );

=head2 save_apf

    $bool = $console->save_apf( $path );

=head2 blit

    $console->blit(
        $source_x,
        $source_y,
        $source_width,
        $source_height,
        $target,
        $target_x,
        $target_y,
        $foreground_alpha,
        $background_alpha,
    );

=head2 set_key_color

    $console->set_key_color( $color );

=head2 clear

    $console->clear;

=head2 get_width

    $width = $console->get_width;

=head2 get_height

    $height = $console->get_height;

=head2 set_background_flag

    $console->set_background_flag( $flag );

=head2 get_background_flag    => [qw( TCOD_console                                   )] => 'int'  );

    $flag = $console->get_background_flag;

=head2 set_alignment          => [qw( TCOD_console int                               )] => 'void' );

    $console->set_alignment( $alignment );

=head2 get_alignment

    $alignment = $console->get_alignment;

=head2 set_char_background

    $console->set_char_background( $x, $y, $color, $flag );

=head2 get_char_background

    $color = $cosole->get_char_background( $x, $y );

=head2 set_char_foreground

    $console->set_char_foreground( $x, $y, $color, $flag );

=head2 get_char_foreground

    $color = $cosole->get_char_foreground( $x, $y );

=head2 set_default_background

    $console->set_default_background( $color );

=head2 get_default_background

    $color = $console->get_default_background;

=head2 set_default_foreground

    $console->set_default_foreground( $color );

=head2 get_default_foreground

    $color = $console->get_default_foreground;

=head2 set_char

    $console->set_char( $x, $y, $char );

=head2 get_char               => [qw( TCOD_console int int                           )] => 'int'  );
=head2 put_char               => [qw( TCOD_console int int int int                   )] => 'void' );
=head2 put_char_ex            => [qw( TCOD_console int int int TCOD_color TCOD_color )] => 'void' );

=head2 Printing methods

# We support up to two controls per function for now
=head3 print           => [qw( TCOD_console int int string                      )] => ['int', 'int'] => 'void' );
=head3 print_ex        => [qw( TCOD_console int int int int string              )] => ['int', 'int'] => 'void' );
=head3 print_rect      => [qw( TCOD_console int int int int string              )] => ['int', 'int'] => 'void' );
=head3 print_rect_ex   => [qw( TCOD_console int int int int int int string      )] => ['int', 'int'] => 'void' );
=head3 get_height_rect => [qw( TCOD_console int int int int string              )] => ['int', 'int'] => 'void' );
# UTF-8 variants
=head3 print_utf           => [qw( TCOD_console int int wstring                 )] => ['int', 'int'] => 'void' );
=head3 print_ex_utf        => [qw( TCOD_console int int int int wstring         )] => ['int', 'int'] => 'void' );
=head3 print_rect_utf      => [qw( TCOD_console int int int int wstring         )] => ['int', 'int'] => 'void' );
=head3 print_rect_ex_utf   => [qw( TCOD_console int int int int int int wstring )] => ['int', 'int'] => 'void' );
=head3 get_height_rect_utf => [qw( TCOD_console int int int int wstring         )] => ['int', 'int'] => 'void' );

=head1 FUNCTIONS

=head2 init_root

    TCOD::Console::init_root(
        $width,
        $height,
        $title,
        $fullscreen,
        $renderer,
    );

Initialise the global game window.

The width and height parameters specify the dimensions of the screen in
characters. The size of the window in pixels will depend on the font used.
The default font uses characters that are 8x8 pixels. See L</set_custom_font>
for how to change this font after creation.

The title will be displayed on top of the window, except when in fullscreen
mode. See L</set_window_title> for how to change this after creation.

The window will be created in fullscreen if the value of C<$fullscreen> is
true. See L</set_fullscreen> and L</is_fullscreen> for ways to modify this
after creation.

The renderer will be one of the elements of the L<TCOD/Renderer> enum.
If you select a renderer that is not supported by the player's machine,
the underlying library will scan the lower renderers until it finds a working
one.

On recent video cards, GLSL (enabled with C<TCOD::RENDERER_GLSL>) results in
up to 900% increase of framerates in the true color sample compared to SDL
renderer.

Whatever renderer you use, it can always be overridden by the player through
the C<libtcod.cfg> file.

You can dynamically change the renderer after calling this function with
L<TCOD::Sys/set_renderer>. You can also read the current renderer with
L<TCOD::Sys::get_renderer>. This might be different from the one you set
when calling this function in case it's not supported on the player's
computer.

=head2 set_custom_font

    TCOD::Console::set_custom_font(
        $string,
        $flags,
        $horizontal_chars,
        $vertical_chars,
    );

This function allows you to use a bitmap font (PNG or BMP) with custom
character size or layout.

It should be called before initializing the root console with L<init_root>.

Once this function is called, you can define your own custom mappings using
mapping functions

The value in C<$flags> will be a combination of a layout and a type from the
L<TCOD/FontFlags> enum. The last two parameters determine the number of
characters in the font along both axes. If set to 0, these will be deduced
from the layout flag.

=head2 map_ascii_code_to_font

    TCOD::Console::map_ascii_code_to_font( $code, $x, $y );

Maps a single ASCII code to a character in the current font.

=head2 map_ascii_codes_to_font

    TCOD::Console::map_ascii_codes_to_font(
        $range_start,
        $range_length,
        $x,
        $y,
    );

Maps consecutive ASCII codes to characters in the current font. The
coordinate provided (in characters) corresponds to the first character in
the range.

=head2 map_string_to_font

    TCOD::Console::map_string_to_font( $string, $x, $y );

Maps the ASCII codes in a string to consecutive characters in the current
font. The coordinate provided (in characters) corresponds to the first
character in the range.

=head2 is_fullscreen

    TCOD::Console::is_fullscreen;

Returns true if the current mode is fullscreen.

=head2 set_fullscreen

    TCOD::Console::set_fullscreen( $bool );

Enable or disable fullscreen mode.

=head2 set_window_title

    TCOD::Console::set_window_title( $title );

This function dynamically changes the title of the game window.

=head2 is_window_closed

    $bool = TCOD::Console::is_window_closed;

When you start the program, this returns false. Once a "close window"
event has been sent by the window manager, it will always return true.
You're supposed to cleanly exit the game.

=head2 has_mouse_focus

    $bool = TCOD::Console::has_mouse_focus;

Returns true if the mouse cursor is inside the game window area and the
game window is the active application.

=head2 is_active

    $bool = TCOD::Console::is_active;

Returns false if the game window is not the active window or is iconified.

=head2 credits

    TCOD::Console::credits;

Render a credits screen with the message "Powered by libtcod C<$VERSION>",
with the current libtcod version you are running. This can be shown during
startup by calling after L</init_root>.

The credits screen can be skipped by pressing any key.

=head2 credits_render

    $bool = TCOD::Console::credits_render( $x, $y, $alpha );

Render the credits message on top of an existing screen at the specified
coordinates. If C<$alpha> is set to a true value, the credits will be
rendered transparently on the existing screen. For this to work, this
function must be called between your screen rendering code and the console
L</flush>.

Returns true when the credits screen is finished.

=head2 credits_reset

    TCOD::Console::credits_reset;

When using L<credits_render>, you can restart the credits animation from
the beginning before it's finished by calling this function.

=head2 flush

    TCOD::Console::flush;

=head2 set_fade

    TCOD::Console::set_fade( $fade, $color );

This function defines the fading parameters, allowing you to fade the game
screen to/from a color. Once they are defined, the fading parameters are
valid until changed (with another call to this function). You don't have to
call this function for each rendered frame.

=head2 get_fade

    $fade = TCOD::Console::get_fade;

=head2 get_fading_color

    $color = TCOD::Console::get_fading_color;

=head2 set_color_control

    TCOD::Console::set_color_control(
        $code,
        $foreground_color,
        $background_color,
    );

If you want to draw a string using different colors for each word, the basic
solution is to call a string printing function several times, changing the
default colors between each call.

An arguably simpler way to do this is to use "color control codes" in your
string, which allows you to draw a string using different colors in a single
call.

A color control code is associated with a foreground and background color set.
If you insert this code in your string, the next characters will use the
colors associated with the color control code.

There are 5 predefined color control codes:

=over

=item * TCOD::COLCTRL_1
=item * TCOD::COLCTRL_2
=item * TCOD::COLCTRL_3
=item * TCOD::COLCTRL_4
=item * TCOD::COLCTRL_5

=back

This function allows you to associate a control code to a color set.

To go back to the console's default colors, insert in your string the color
stop control code: C<TCOD::COLCTRL_STOP>.

You can also use any color without assigning it to a control code, using the
generic control codes: C<TCOD::COLCTRL_FORE_RGB> and C<TCOD::COLCTRL_BACK_RGB>.

These controls respectively change the foreground and background color used to
print the string characters. In the string, you must insert the red, green,
and blue components of the color as numbers between 1 and 255 immediately
after this code. Note that using 0 in this context is not allowed, because it
represents the end of the string in C/C++.

=head2 check_for_keypress

    # Deprecated
    $key = TCOD::Console::check_for_keypress( $mask );

Return immediately with a L<TCOD::Key> populated with data from a recently
pressed key.

This function is deprecated. Use SDL2::PollEvent instead.

=head2 is_key_pressed

    # Deprecated
    $bool = TCOD::Console::is_key_pressed( $keycode );

The preferred way to check for user input is to use
L<TCOD::Sys/check_for_event>, but you can also get the status of any special
key at any time with

This function is deprecated. Use SDL to check the keyboard state instead.

=head1 SEE ALSO

=over

=item L<TCOD>

=item L<TCOD::Key>

=item L<TCOD::Color>

=item L<TCOD::Image>

=back

=head1 COPYRIGHT AND LICENSE

Copyright 2021 José Joaquín Atria

This library is free software; you can redistribute it and/or modify it under
the Artistic License 2.0.
